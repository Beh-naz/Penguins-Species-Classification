from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, hamming_loss
from sklearn.preprocessing import MinMaxScaler, MaxAbsScaler
import pandas as pd
import numpy as np

import seaborn as sns

penguins = sns.load_dataset('penguins').dropna()

penguins.head()

sns.pairplot(penguins[['bill_length_mm', 'bill_depth_mm', 'species']], hue='species', kind='kde')

X = penguins[['bill_length_mm', 'bill_depth_mm']]
y = penguins[['species']]

X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.3)

neigh = KNeighborsClassifier(n_neighbors=4)

neigh.fit(X_train, y_train)

y_pred = neigh.predict(X_test)

accuracy_score(y_test, y_pred)

X = penguins[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']]
y = penguins[['species']]
X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.3)
neigh = KNeighborsClassifier(n_neighbors=9)
neigh.fit(X_train, y_train)
y_pred = neigh.predict(X_test)
accuracy_score(y_test, y_pred)

sns.pairplot(penguins[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'species']], hue='species', kind='kde')

X = penguins[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g']]
y = penguins[['species']]

scaler = MinMaxScaler()
scaler.fit(X)
X = scaler.transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.3)
neigh = KNeighborsClassifier(n_neighbors=4)
neigh.fit(X_train, y_train)
y_pred = neigh.predict(X_test)
accuracy_score(y_test, y_pred)

penguins.sex = penguins.sex.replace({"Female": 0, "Male": 1})
penguins.head()

set(penguins['island'])

penguins = penguins.join(pd.get_dummies(penguins['island']))
penguins

X = penguins[['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm', 'body_mass_g', 'sex', 'Biscoe', 'Dream', 'Torgersen']]
y = penguins[['species']]

scaler = MinMaxScaler()
scaler.fit(X)
X = scaler.transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle=True, train_size=0.3)
neigh = KNeighborsClassifier(n_neighbors=4)
neigh.fit(X_train, y_train)
y_pred = neigh.predict(X_test)
accuracy_score(y_test, y_pred)
